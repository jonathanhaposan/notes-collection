create notification service

current function :
- push notification
- email

database table:
- task
    - id
    - type
    - tenant_id
    - source_name
    - status
    - total_retry
    - created_at
    - updated_at
    - data
    - latest_error

- notification_type
    - id
    - name
    - description

- status
    - id
    - description

type :
1 - email
2 - pn

tenant_id : 7 negara

source_name : string nama service

status
1 - recieved
2 - sent
3 - failed from 3rd party
4 - failed download attachment

total_retry     : no of retry after cron
created_at      : when data recieved
updated_at      : when failed/sent
data_sended     : what data send
latest_error    : simpan error terakhir

stack
database , message queue , golang app , cron

flow0
@startuml
title new incoming notification request
"grpc client" -> "grpc server" : new notif
"grpc server" -> "grpc server": validate notif data
"grpc server" -> "redis": get template
alt case failed / not exist in redis
	"grpc server" -> "database" : get template 
	"grpc server" <-- "database"
    alt case template not exist in db
        "grpc client" <-- "grpc server": error
    end 
    "grpc server" -> "redis": caching template, ttl 8 hour
    "grpc server" <-- "redis"
end
"grpc server" -> "database": tx insert db with status 0 (pending)
"grpc server" <-- "database"
"grpc server" -> "topic notifier.task_pool.fanout" : publish data
"grpc server" <-- "topic notifier.task_pool.fanout"
"grpc client" <-- "grpc server" : ok
@enduml

flow1
@startuml
title task pool process
"topic notifier.task_pool.fanout" -> "notifier-service" : pull message
"notifier-service" -> "notifier-service": unmarshall data
"notifier-service" -> "notifier-service": validate data
"notifier-service" -> "redis": get template
alt case failed / not exist in redis
	"notifier-service" -> "database" : get template 
	"notifier-service" <-- "database"
    alt case template not exist in db
        "notifier-service" -> "database" : update status 5 (template not found)
        "notifier-service" <-- "database"
        "topic notifier.task_pool.fanout" <-- "notifier-service" : ack
    end
    "notifier-service" -> "redis": caching template, ttl 8 hour
    "notifier-service" <-- "redis"
end
"notifier-service" -> "notifier-service": parse placeholder
"notifier-service" -> "database": update status 1 (on process)
"notifier-service" <-- "database"
"notifier-service" -> "pubsub" : publish to related topic (pn / email)
"notifier-service" <-- "pubsub"
"topic notifier.task_pool.fanout" <-- "notifier-service" : ack
@enduml

flow2
@startuml
title push notification process
"topic notifier.push_notif.fanout" -> "notifier-service" : pull message
"notifier-service" -> "notifier-service" : unmarshall data
"notifier-service" -> "shenzhen API" : send pn
"notifier-service" <-- "shenzhen API" : response
alt case success
	"notifier-service" -> "database" : update status to 2 (success)
	"notifier-service" <-- "database"
else case failed before retry exceed limit
	"notifier-service" -> "notifier-service" : increment retry
	"notifier-service" -> "topic notifier.push_notif.fanout" : re-publish data
else case failed after retry exceed limit
	"notifier-service" -> database : update status to 3 (failed from shenzhen)
	"notifier-service" <-- "database"
end
"topic notifier.push_notif.fanout" <-- "notifier-service" : ack
@enduml


flow3
@startuml
title Email Flow
"topic notifier.email.fanout" -> "notifier-service" : consume message
"notifier-service" -> "notifier-service" : unmarshal data
"notifier-service" -> "notifier-service" : download attachment
alt case failed download attachment
	"notifier-service" -> "notifier-service" : retry download
else case failed download attachment after retry exceed limit
	"notifier-service" -> database : update status to 4 (failed download attachment)
	"notifier-service" <-- "database"
else case success
    "notifier-service" -> "smtp server" : send email
    "notifier-service" <-- "smtp server"
    alt case success
        "notifier-service" -> "database" : update status to 2 (success)
        "notifier-service" <-- "database"
    else case failed before retry exceed limit
        "notifier-service" -> "notifier-service" : increment retry
	    "notifier-service" -> "topic notifier.email.fanout" : re-publish data
    else case failed after retry exceed limit
        "notifier-service" -> database : update status to 3 (failed from smtp server)
        "notifier-service" <-- "database"
    end
end
"topic notifier.email.fanout" <-- "notifier-service" : ack
@enduml

flow4
@startuml
title retry failed task
"GKE" -> "notifier-cron" : trigger cron
"notifier-cron" -> "database" : get failed data (status 3,4,5,.. etc)
"notifier-cron" <-- "database"
"notifier-cron" -> "topic notifier.task_pool.fanout" : publish data to task pool
"notifier-cron" <-- "topic notifier.task_pool.fanout"
"GKE" <-- "notifier-cron"
@enduml

flow5
@startuml
title create template
"user" -> "notifier-web" : new template
"notifier-web" -> "notifier-web": validate data
"notifier-web" -> "database" : insert data
"notifier-web" <-- "database"
"notifier-web" -> "redis": set to redis, ttl 8 hour
"notifier-web" <-- "redis"
"user" <-- "notifier-web": ok
@enduml

flow6
@startuml
title update template
"user" -> "notifier-web" : updated template
"notifier-web" -> "notifier-web": validate data
"notifier-web" -> "database" : update data
"notifier-web" <-- "database"
"notifier-web" -> "redis": set to redis, ttl 8 hour
"notifier-web" <-- "redis"
"user" <-- "notifier-web": ok
@enduml

cron
retry task with status 3 , 4 , 5

endpoint
- /api/v1/push_notification
    {
        "source_name"   : "service:event-tix",
        "tenant_id"     : "ID",
        "data"          : {
            "userid": 209860000,
            "is_scheduled": false,
            "action_redirect_type": "My Products",
            "country": "TW",
            "name": "shirley test in test",
            "pn_content": "update insert in test Promotions",
            "ar_title": "insert task",
            "ar_url": "http://www.google.com",
            "ar_content": "ar content in test Promotions",
            "pn_image_link": "http://www.aybsz.com/img/XK004%20(3).jpg",
            "schedule_time": 1529037161,
            "template_description": "desc",
            "pn_grouping": "Promotions",
            "ar_image_link": "http://f.shopee.tw/file/5dd7fe238d1b2d161aa6fd6ace960c72"
        }
    }

    {
        status : 200,
        message : success
    }

    {
        status : 200,
        errors :["error1"]
    }

    - validation : 
        - sesuai dengan docs
        - source_name
        - tenant_id

- /api/v1/email
    {
        "source_name"   : "service:event-tix",
        "tenant_id"     : "ID",
        "data"          : {
            "send_to"       : ["jonathan.situmorang@shopee.co.id"],
            "bcc"           : ["fake_email1@email.com"],
            "cc"            : ["fake_email2@email.com"],
            "title"         : "Subject",
            "body"          : "Main message",
            "attachments"   : [
                {
                    "filename"  : "nama file 1",
                    "url"       : "https://aws.cloud.download/file/something"
                }
            ]
        }
    }

    {
        status : 200,
        message : success
    }

    {
        status : 200,
        errors :["error1"]
    }

    - validation :
        - source_name 
        - tenant_id
        - send_to
        - title
        - body
        - if attachment exist , url must a valid url structure
        - if cc / bcc exist, must a valid email structure